# This file uses YAML anchors and aliases to prevent repetition of blocks of config:
# https://support.atlassian.com/bitbucket-cloud/docs/yaml-anchors/
#
# Two primary anchors are checkout and setup_env, called as the first step of almost all jobs:
# - checkout: A custom checkout step to reduce the amount of data downloaded to improve speed.
# - setup_env: Sets up the common environment used by all build steps.
#
# Two CCI executors are used:
# - docker (small): Used only to launch external EC2 instances for big workloads. It's the cheapest option.
# - machine (large): Used for building in CCI itself. 4cpus, 15GB has the optimal power/cost ratio.
#
# The docker executor uses a custom image build in `build_image`. It's specifically streamlined for fast download
# with just enough tools to execute the build system, and launch EC2 instances etc.
#
# There are some `join` steps that are just noops. They are just used to produce cleaner graph rendering in CCI.

version: 2.1
parameters:
  workflow:
    type: string
    default: "system"
  target:
    type: enum
    default: "dev"
    description: The environment to trigger redeploys to
    enum: ["dev", "testnet", "stage"]

# This build step checks out the code from the repository. It has a hardcoded readonly key to allow the checkout.
# Initially it just fetches the repo metadata for the current commit hash to a depth of 50 commits.
# We need historical commit hashes to calculate diffs between previous and current commits.
# It then checks out the fetched head to actually download the data.
checkout: &checkout
  run:
    name: "Checkout code"
    command: |
      cd $HOME
      mkdir -p .ssh
      chmod 0700 .ssh
      ssh-keyscan -t rsa github.com >> .ssh/known_hosts

      # IF YOU'RE CHANGING THIS, YOU ALSO WANT TO CHANGE: build-system/remote_build/remote_build
      # Shallow checkout this commit.
      mkdir -p project
      cd project
      git init
      git remote add origin $CIRCLE_REPOSITORY_URL
      # Only download metadata when fetching.
      git fetch --depth 50 --filter=blob:none origin $CIRCLE_SHA1
      git checkout FETCH_HEAD
      # Pull in build-system submodule.
      git submodule update --init build-system

# This build step checks out the code from the benchmark-archive repository.
# The key is saved in CircleCi environment in base64 format.
# Initially it just fetches the latest version.
benchmark_add_keys: &benchmark_add_keys
  run:
    name: "Add keys for getting the benchmark archive"
    command: |
      cd $HOME
      mkdir -p .ssh
      chmod 0700 .ssh
      ssh-keyscan -t rsa github.com >> .ssh/known_hosts

      # A read-write key for updating the repository.
      echo "$GITHUB_BENCMARK_REPOSITORY_SSH_KEY" | base64 -d > .ssh/id_ed25519

      # This allows github to discern wich key to use.
      echo "Host github.com
        Hostname github.com
        IdentityFile=/root/.ssh/id_rsa

      Host github.com-logs
        Hostname github.com
        IdentityFile=/root/.ssh/id_ed25519" > .ssh/config

      chmod 0600 .ssh/id_ed25519
      ssh-add .ssh/id_ed25519

# Called setup_env to setup a bunch of global variables used throughout the rest of the build process.
# It takes the required CCI environment variables as inputs, and gives them normalised names for the rest of
# the build process. This enables easy running of the build system external to CCI, as used for powerful EC2 builds.
setup_env: &setup_env
  run:
    name: "Setup environment"
    command: ./build-system/scripts/setup_env "$CIRCLE_SHA1" "$CIRCLE_TAG" "$CIRCLE_JOB" "$CIRCLE_REPOSITORY_URL" "$CIRCLE_BRANCH"

# This step is used to save logs from various barretenberg test to the workspace so that they can be used later to parse benchmark values out of them
save_logs: &save_logs
  persist_to_workspace:
    root: /tmp/test-logs
    paths:
      - ./*

jobs:
  wasm-linux-clang:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: cond_spot_run_build aztec-connect-cpp-wasm-linux-clang 64

  x86_64-linux-clang:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: cond_spot_run_build aztec-connect-cpp-x86_64-linux-clang 64

  x86_64-linux-clang-assert:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: cond_spot_run_build aztec-connect-cpp-x86_64-linux-clang-assert 64

  x86_64-linux-gcc:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: cond_spot_run_build aztec-connect-cpp-x86_64-linux-gcc 64

  small-circuit-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests aztec-connect-cpp-x86_64-linux-clang-assert ac-tests
      - *save_logs

  tx-rollup-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests aztec-connect-cpp-x86_64-linux-clang-assert rollup_proofs_tx_rollup_tests --gtest_filter=-rollup_full_tests.*
      - *save_logs

  tx-rollup-full-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests aztec-connect-cpp-x86_64-linux-clang-assert rollup_proofs_tx_rollup_tests --gtest_filter=rollup_full_tests.*
      - *save_logs

  root-rollup-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests aztec-connect-cpp-x86_64-linux-clang-assert rollup_proofs_root_rollup_tests --gtest_filter=-root_rollup_full_tests.*
      - *save_logs

  root-rollup-full-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests aztec-connect-cpp-x86_64-linux-clang-assert rollup_proofs_root_rollup_tests --gtest_filter=root_rollup_full_tests.*
      - *save_logs

  root-verifier-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests aztec-connect-cpp-x86_64-linux-clang-assert rollup_proofs_root_verifier_tests
      - *save_logs

  # benchmark-aggregator:
  #   docker:
  #     - image: aztecprotocol/alpine-build-image
  #   resource_class: small
  #   steps:
  #     - attach_workspace:
  #         at: /tmp/test-logs
  #     - *checkout
  #     - *setup_env
  #     - *benchmark_add_keys
  #     - run:
  #         name: 'Test'
  #         command: store_test_benchmark_logs aztec-connect-cpp-x86_64-linux-clang-assert

  blockchain-vks:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: cond_spot_run_build blockchain-vks 32

  contracts:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: build contracts

  yarn-project-base:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: build yarn-project-base

  barretenberg-js:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build barretenberg.js

  contracts-verifier-test:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: cond_spot_run_build contracts-verifier-test 64

  blockchain:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build blockchain

  aztec-dev-cli:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build aztec-dev-cli

  kebab:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build kebab

  halloumi:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build halloumi

  falafel:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build falafel

  block-server:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build block-server

  sdk:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build sdk

  wasabi:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build wasabi

  hummus:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build hummus

  wallet:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build wallet

  end-to-end:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: build end-to-end

  e2e-prover:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end ./src/e2e_deposit.test.ts 1 1 VerificationKey1x1

  e2e-payment:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end ./src/e2e.test.ts

  e2e-deposit-permit:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end ./src/e2e_deposit_permit.test.ts

  e2e-migrated-accounts:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end ./src/e2e_migrated_accounts.test.ts

  e2e-migrate-account-and-funds:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end ./src/e2e_migrate_account_and_funds.test.ts

  e2e-account:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end ./src/e2e_account.test.ts

  e2e-sync-bridge:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end ./src/e2e_sync_bridge.test.ts

  e2e-async-bridge:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end ./src/e2e_async_bridge.test.ts

  e2e-subsidy:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end ./src/e2e_subsidy.test.ts

  e2e-subsidy-async:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end ./src/e2e_subsidy_async.test.ts

  e2e-non-fee-assets:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end ./src/e2e_non_fee_assets.test.ts

  e2e-virtual-assets:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end ./src/e2e_virtual_assets.test.ts

  e2e-chained-txs:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end ./src/e2e_chained_txs.test.ts

  e2e-chained-txs-with-spending-keys:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end ./src/e2e_chained_txs_with_spending_keys.test.ts

  e2e-browser:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end ./src/e2e_browser.test.ts

  e2e-deposit-approval:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end ./src/e2e_deposit_approval.test.ts

  int-rollup-processor:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end ./src/int_rollup_processor.test.ts 3 2 AlwaysTrueVerifier

  e2e-join:
    docker:
      - image: cimg/base:current
    resource_class: small
    steps:
      - run:
          name: "Noop"
          command: echo Noop

  cpp-join:
    docker:
      - image: cimg/base:current
    resource_class: small
    steps:
      - run:
          name: "Noop"
          command: echo Noop

  yarn-join:
    docker:
      - image: cimg/base:current
    resource_class: small
    steps:
      - run:
          name: "Noop"
          command: echo Noop

  deploy:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: medium
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "derive keys"
          command: |
            ensure_repo aztec-dev-cli $ECR_REGION
            docker run --rm $ECR_URL/aztec-dev-cli:cache-$COMMIT_HASH deriveKeys "$KEY_DERIVATION_MNEMONIC" >> $BASH_ENV
      - run:
          name: "contracts"
          working_directory: contracts
          command: |
            deploy_ecr contracts
            deploy_dockerhub contracts
            ./scripts/ci_deploy_contracts.sh
      - run:
          name: "barretenberg.js"
          command: |
            deploy_ecr barretenberg.js
            deploy_npm barretenberg.js
      - run:
          name: "blockchain"
          command: |
            deploy_ecr blockchain
            deploy_npm blockchain
      - run:
          name: "kebab"
          command: |
            LAST_COMMIT=$(last_successful_commit kebab $DEPLOY_TAG-deployed)
            if changed $LAST_COMMIT "contracts/deploy/$VERSION_TAG"; then
              # Taint the efs file system to recreate.
              deploy kebab kebab aws_efs_file_system.kebab_data_store
            else
              deploy kebab
            fi
            deploy_dockerhub kebab
      - run:
          name: "halloumi"
          command: |
            deploy halloumi "halloumi halloumi-inner halloumi-outer"
            deploy_dockerhub halloumi
      - run:
          name: "falafel"
          command: |
            LAST_COMMIT=$(last_successful_commit falafel $DEPLOY_TAG-deployed)
            if changed $LAST_COMMIT "contracts/deploy/$VERSION_TAG"; then
              # Taint the postgres db and efs file system to recreate them.
              # We include block-server as a service to restart to clear caches.
              deploy falafel "falafel block-server" "aws_db_instance.postgres aws_efs_file_system.falafel_data_store"
            else
              deploy falafel
            fi
            deploy_dockerhub falafel
      - run:
          name: "block-server"
          command: deploy block-server
      - run:
          name: "sdk"
          command: |
            deploy_ecr sdk
            deploy_s3 sdk
            deploy_npm sdk
      - run:
          name: "hummus"
          command: |
            deploy_ecr hummus
            deploy_s3 hummus
      - run:
          name: "wallet"
          command: |
            deploy_ecr wallet
            deploy_s3 wallet

# Repeatable config for defining the workflow below.
tag_regex: &tag_regex /v[0-9]+(\.[0-9]+)*(-[a-zA-Z-]+\.[0-9]+)?/
defaults: &defaults
  filters:
    tags:
      only: *tag_regex
  context:
    - build
ac_test: &ac_test
  requires:
    - x86_64-linux-clang-assert
  <<: *defaults
yarn_project: &yarn_project
  requires:
    - yarn-project-base
  <<: *defaults
e2e_test: &e2e_test
  requires:
    - e2e-join
  <<: *defaults
deploy_defaults: &deploy_defaults
  filters:
    branches:
      only:
        - master
        - stage
    tags:
      only: *tag_regex
  context:
    - build

workflows:
  system:
    when:
      equal: [system, << pipeline.parameters.workflow >>]
    jobs:
      - wasm-linux-clang:
          <<: *defaults
      - x86_64-linux-clang:
          <<: *defaults
      - x86_64-linux-clang-assert:
          <<: *defaults
      - x86_64-linux-gcc:
          <<: *defaults
      - small-circuit-tests: *ac_test
      - tx-rollup-tests: *ac_test
      - tx-rollup-full-tests: *ac_test
      - root-rollup-tests: *ac_test
      - root-rollup-full-tests: *ac_test
      - root-verifier-tests: *ac_test
      # - benchmark-aggregator:
      #     requires:
      #       - small-circuit-tests
      #       - tx-rollup-tests
      #       - tx-rollup-full-tests
      #       - root-verifier-tests
      #       - root-rollup-tests
      #       - root-rollup-full-tests
      #     filters:
      #       branches:
      #         only:
      #           - master
      - blockchain-vks:
          requires:
            - x86_64-linux-clang
          <<: *defaults
      - contracts:
          requires:
            - blockchain-vks
          <<: *defaults
      - yarn-project-base:
          requires:
            - wasm-linux-clang
            - contracts
          <<: *defaults
      - contracts-verifier-test: *yarn_project
      - barretenberg-js: *yarn_project
      - blockchain: *yarn_project
      - aztec-dev-cli: *yarn_project
      - kebab: *yarn_project
      - halloumi: *yarn_project
      - falafel: *yarn_project
      - block-server: *yarn_project
      - sdk: *yarn_project
      - wasabi: *yarn_project
      - hummus: *yarn_project
      - wallet: *yarn_project
      - end-to-end: *yarn_project
      - e2e-join:
          requires:
            - kebab
            - halloumi
            - falafel
            - sdk
            - hummus
            - end-to-end
          <<: *defaults
      - e2e-account: *e2e_test
      - e2e-browser: *e2e_test
      - e2e-chained-txs-with-spending-keys: *e2e_test
      - e2e-chained-txs: *e2e_test
      - e2e-sync-bridge: *e2e_test
      - e2e-async-bridge: *e2e_test
      - e2e-subsidy: *e2e_test
      - e2e-subsidy-async: *e2e_test
      - e2e-migrate-account-and-funds: *e2e_test
      - e2e-migrated-accounts: *e2e_test
      - e2e-non-fee-assets: *e2e_test
      - e2e-payment: *e2e_test
      - e2e-deposit-permit: *e2e_test
      - e2e-prover: *e2e_test
      - e2e-virtual-assets: *e2e_test
      - e2e-deposit-approval: *e2e_test
      - int-rollup-processor: *e2e_test
      - cpp-join:
          requires:
            - small-circuit-tests
            - tx-rollup-tests
            - tx-rollup-full-tests
            - root-rollup-tests
            - root-rollup-full-tests
            - root-verifier-tests
          <<: *deploy_defaults
      - yarn-join:
          requires:
            - wallet
            - wasabi
            - blockchain
            - contracts-verifier-test
            - barretenberg-js
            - block-server
            - aztec-dev-cli
          <<: *deploy_defaults
      - deploy:
          requires:
            # Must list all projects at the end of a dependency chain.
            - cpp-join
            - yarn-join
            - e2e-account
            - e2e-browser
            - e2e-chained-txs
            - e2e-chained-txs-with-spending-keys
            - e2e-async-bridge
            - e2e-sync-bridge
            - e2e-subsidy
            - e2e-subsidy-async
            - e2e-migrate-account-and-funds
            - e2e-migrated-accounts
            - e2e-non-fee-assets
            - e2e-payment
            - e2e-deposit-permit
            - e2e-prover
            - e2e-virtual-assets
            - e2e-deposit-approval
            - int-rollup-processor
          <<: *deploy_defaults
